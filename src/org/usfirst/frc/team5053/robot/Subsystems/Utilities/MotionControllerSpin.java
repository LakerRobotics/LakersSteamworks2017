// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team5053.robot.Subsystems.Utilities;

//import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc.team5053.robot.Subsystems.Utilities.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.RobotDrive;

import org.usfirst.frc.team5053.robot.Subsystems.Utilities.MotionControlHelper;
import org.usfirst.frc.team5053.robot.Subsystems.Utilities.MotionControlPIDController;
import org.usfirst.frc.team5053.robot.Subsystems.DriveTrain;
import org.usfirst.frc.team5053.robot.Robot;
//import org.usfirst.frc.team5053.robot.Subsystems.Utilities.DriveStraightSpeedPIDOutput;
import org.usfirst.frc.team5053.robot.RobotSensorMap;

/**
 *
 */
public class MotionControllerSpin extends Command {
	RobotDrive robotDrive = Robot.getDriveTrain().getRobotDrive();

	public static Encoder m_LeftDrive;
	public static Encoder m_RightDrive;
	
	public  ADXRS450_Gyro m_Gyro;
	
	protected double turn = -180;//default in degrees
	double targetAngle = 90; // temp real value calculated below
	double targetTolerance = 0.5 ; //degrees

    protected double maxspeedInRPM = 30 ; //360/60 converts the first numbers which is in RPM to degrees/second 4/1/2016 RGT increase from 15 to 20
    protected double     ramp =  3.5*maxspeedInRPM; //degrees, changed to 15 from 30 Saturday after 2nd match
    double maxspeed = maxspeedInRPM*(360/60) ; //360/60 converts the first numbers which is in RPM to degrees/second 4/1/2016 RGT increase from 15 to 20
    double    start =   0; //degrees
    MotionControlHelper rotationSpeedProfile; 
    
    final double Kp = 0.001; // so if off by more then 5% (the first number) of max power then full power
    final double Ki = 0.0;
    final double Kd = 0.0;
    MotionControlPIDController rotationSpeedPID;
    
    public MotionControllerSpin(double a_turn) {
    	System.out.println("MotionControllerSpin turn "+a_turn+".");
        SmartDashboard.putString("DriveSpinCodeLocation","entered MotionControllerSpin(a_turn)");
		   turn = a_turn;
	       // Use requires() here to declare subsystem dependencies
	       // eg. requires(chassis);

	       // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.getDriveTrain());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        constructorInit();         
	 }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

     // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public MotionControllerSpin() {
        SmartDashboard.putString("DriveSpinCodeLocation","entered MotionControllerSpin()");
        System.out.println("MotionControllerSpin entered constructor MotionControllerSpin()");

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.getDriveTrain());
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        //Setup the rotation profile, how fast we are going to spin & the rampUp/RampDown distance to get there
        constructorInit();         

    }

	/**
	 * 
	 */
	protected void constructorInit() {
		rotationSpeedProfile = new MotionControlHelper(targetAngle, ramp, maxspeed, start, (PIDSource) m_Gyro,new DriveSpinPIDOutput());
        rotationSpeedPID = new MotionControlPIDController(Kp,Ki,Kd, rotationSpeedProfile );
    	rotationSpeedPID.setOutputRange(-1.0, 1.0);
	}

    // Called just before this Command runs the first time
    public void initialize() {
    	m_Gyro = Robot.getRobotSensors().getGyro();
    	m_LeftDrive = Robot.getRobotSensors().getLeftDrive();
    	m_RightDrive = Robot.getRobotSensors().getRightDrive();
    	robotDrive = Robot.getDriveTrain().getRobotDrive();
    	
        SmartDashboard.putString("DriveSpinCodeLocation","entered initialize()");
//    	   	RobotMap.gyroToUse.reset();
    	   	
 //   	    rotationSpeedPID.setAbsoluteTolerance(targetTolerance);
//    	    mcPID.free();
        start = m_Gyro.getAngle();
		targetAngle = turn + start;
//		
//Moved to Constructor        rotationSpeedProfile = new MotionControlHelper(targetAngle, ramp, maxspeed, start, (PIDSource) RobotMap.gyroToUse,new DriveSpinPIDOutput());
//        rotationSpeedPID = new MotionControlPIDController(Kp,Ki,Kd, rotationSpeedProfile );
//    	    rotationSpeedPID.setOutputRange(-1.0, 1.0);
    	    rotationSpeedProfile.setTargetDistance(targetAngle);
    	    rotationSpeedPID.enable();
    }

    // Called repeatedly when this Command is scheduled to run
    public void execute() {
        SmartDashboard.putString("DriveSpinCodeLocation","entered execute()");
        System.out.println("DriveSpinCodeLocation "+"entered execute()");
    	// get current Angle to report on
    	double currentAngle = m_Gyro.getAngle();
        SmartDashboard.putNumber("MotionControllerSpin Current angle",currentAngle);
        SmartDashboard.putNumber("MotionControllerSpin Turn",turn);
        SmartDashboard.putNumber("MotionControllerSpin Gyro Rate",m_Gyro.getRate());
        SmartDashboard.putNumber("MotionControllerSpin Gryro Target Rate",rotationSpeedProfile.getTargetSpeed(currentAngle));
//        SmartDashboard.putNumber("MotionControllerSpin Time",this.timeSinceInitialized());
    }

    // Make this return true when this Command no longer needs to run execute()
    public boolean isFinished() {
        SmartDashboard.putString("DriveSpinCodeLocation","entered isFinished()");
        
    	if(Math.abs(m_Gyro.getAngle()-targetAngle)<targetTolerance) { 
       		rotationSpeedPID.disable();
//       		mcPID.getError() 
       		System.out.println("MotionControllerSpin Finished true");  
//20170208 because when on the motors were humming & may want to leave at some speed beside zero robotDrive.tankDrive(0,0);
       		return  true;
       	}
       	else{
               return false;
       	}

    }

    // Called once after isFinished returns true
    public void end() {
        SmartDashboard.putString("DriveSpinCodeLocation","entered end()");
        System.out.println("MotionControllerSpin "+"entered end()");
        System.out.println("MotionControllerSpin isEnabled()="+rotationSpeedPID.isEnabled());
        System.out.println("MotionControllerSpin after call to disable isEnabled()="+rotationSpeedPID.isEnabled());
   	
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    public void interrupted() {
        SmartDashboard.putString("DriveSpinCodeLocation","entered interrupted()");
     	rotationSpeedPID.disable();
        System.out.println("MotionControllerSpin entered interrupted()");
        end();
    }
}
